package com.cmpe281.finalproject.smart_robot_backend.services;

import com.cmpe281.finalproject.smart_robot_backend.dto.AlertDto;
import com.cmpe281.finalproject.smart_robot_backend.entities.Alert;
import com.cmpe281.finalproject.smart_robot_backend.exceptions.AlertNotFoundException;
import com.cmpe281.finalproject.smart_robot_backend.repositories.AlertRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class AlertService {

    @Autowired
    private AlertRepository alertRepository;

    public Alert createAlert(Long robotId, AlertDto alertDto) {
        Alert alert = new Alert();
        alert.setRobotId(robotId);
        alert.setAlertName(alertDto.getAlertName());
        alert.setSeverity(alertDto.getSeverity());
        alert.setTimestamp(LocalDateTime.now());
        alert.setLocation(alertDto.getLocation());
        alert.setStatus(alertDto.getStatus());

        return alertRepository.save(alert);
    }

    public Alert getAlertById(Long alertId) {
        return alertRepository.findById(alertId)
                .orElseThrow(() -> new AlertNotFoundException("Alert not found with ID: " + alertId));
    }

    public List<Alert> getAllAlerts(int page) {
        Pageable pageable = PageRequest.of(page, 10); // 10 alerts per page
        Page<Alert> alertPage = alertRepository.findAll(pageable);
        return alertPage.getContent();
    }

    public Alert updateAlert(Long alertId, AlertDto updatedAlertDto) {
        Alert existingAlert = alertRepository.findById(alertId)
                .orElseThrow(() -> new AlertNotFoundException("Alert not found with ID: " + alertId));

        existingAlert.setAlertName(updatedAlertDto.getAlertName());
        existingAlert.setSeverity(updatedAlertDto.getSeverity());
        existingAlert.setLocation(updatedAlertDto.getLocation());
        existingAlert.setStatus(updatedAlertDto.getStatus());

        return alertRepository.save(existingAlert);
    }

    public void deleteAlert(Long alertId) {
        Alert existingAlert = alertRepository.findById(alertId)
                .orElseThrow(() -> new AlertNotFoundException("Alert not found with ID: " + alertId));
        alertRepository.delete(existingAlert);
    }

    public List<Alert> getAlertsByRobotId(Long robotId) {
        return alertRepository.findByRobotId(robotId);
    }

    public List<Alert> getAlertsBySeverity(String severity) {
        return alertRepository.findBySeverity(severity);
    }

}